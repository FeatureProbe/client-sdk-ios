// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
    #ifndef UNIFFI_SHARED_HEADER_V4
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, RustBuffer, RustBuffer *_Nonnull);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

void ffi_featureprobe_1876_FeatureProbe_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull featureprobe_1876_FeatureProbe_new(
      void*_Nonnull config,void*_Nonnull user,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull featureprobe_1876_FeatureProbe_new_for_test(
      RustBuffer toggles,
    RustCallStatus *_Nonnull out_status
    );
void featureprobe_1876_FeatureProbe_close(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
int8_t featureprobe_1876_FeatureProbe_bool_value(
      void*_Nonnull ptr,RustBuffer key,int8_t default_value,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer featureprobe_1876_FeatureProbe_bool_detail(
      void*_Nonnull ptr,RustBuffer key,int8_t default_value,
    RustCallStatus *_Nonnull out_status
    );
double featureprobe_1876_FeatureProbe_number_value(
      void*_Nonnull ptr,RustBuffer key,double default_value,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer featureprobe_1876_FeatureProbe_number_detail(
      void*_Nonnull ptr,RustBuffer key,double default_value,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer featureprobe_1876_FeatureProbe_string_value(
      void*_Nonnull ptr,RustBuffer key,RustBuffer default_value,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer featureprobe_1876_FeatureProbe_string_detail(
      void*_Nonnull ptr,RustBuffer key,RustBuffer default_value,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer featureprobe_1876_FeatureProbe_json_value(
      void*_Nonnull ptr,RustBuffer key,RustBuffer default_value,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer featureprobe_1876_FeatureProbe_json_detail(
      void*_Nonnull ptr,RustBuffer key,RustBuffer default_value,
    RustCallStatus *_Nonnull out_status
    );
void featureprobe_1876_FeatureProbe_track(
      void*_Nonnull ptr,RustBuffer event,RustBuffer value,
    RustCallStatus *_Nonnull out_status
    );
void ffi_featureprobe_1876_FPUser_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull featureprobe_1876_FPUser_new(
      
    RustCallStatus *_Nonnull out_status
    );
void featureprobe_1876_FPUser_stable_rollout(
      void*_Nonnull ptr,RustBuffer key,
    RustCallStatus *_Nonnull out_status
    );
void featureprobe_1876_FPUser_with(
      void*_Nonnull ptr,RustBuffer key,RustBuffer value,
    RustCallStatus *_Nonnull out_status
    );
void ffi_featureprobe_1876_FPUrl_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_featureprobe_1876_FPUrlBuilder_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull featureprobe_1876_FPUrlBuilder_new(
      RustBuffer remote_url,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer featureprobe_1876_FPUrlBuilder_build(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_featureprobe_1876_FPConfig_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull featureprobe_1876_FPConfig_new(
      void*_Nonnull remote_url,RustBuffer client_sdk_key,uint32_t refresh_interval,uint32_t start_wait,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_featureprobe_1876_rustbuffer_alloc(
      int32_t size,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_featureprobe_1876_rustbuffer_from_bytes(
      ForeignBytes bytes,
    RustCallStatus *_Nonnull out_status
    );
void ffi_featureprobe_1876_rustbuffer_free(
      RustBuffer buf,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_featureprobe_1876_rustbuffer_reserve(
      RustBuffer buf,int32_t additional,
    RustCallStatus *_Nonnull out_status
    );
